- install version 22 of OpenJDK
- install latest version of Intellij Community Edition
- create a new private github repository and name it last-second
- use spring initializer to create a new Spring Boot project: https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.3&packaging=jar&jvmVersion=22&groupId=com.bagdouri&artifactId=lastsecond&name=lastsecond&description=Demo%20project%20for%20Spring%20Boot&packageName=com.bagdouri.lastsecond&dependencies=lombok,configuration-processor,devtools,web
- extract the spring project into your local github repository
- build the project using maven: mvn clean install

- create a DTO class representing a flight booking: 
id, customer first name, customer last name, customer ID number, departure airport, departure date/time, arrival airport, arrival date/time, price
- create a service FlightBookingService that manages flight bookings:
--> create flight booking (save in a list or map for now)
--> get flight booking by ID
--> get all flight bookings
--> update flight booking
--> delete flight booking

- create a controller FlightBookingController that provides endpoints to manage flight bookings.

- add the springdoc dependency to your maven POM file to generate an OpenAPI (Swagger) documentation
		
- run the application on your local environment:
--> make sure that the application starts successfully
--> make sure that the swagger is accessible on http://localhost:8080/swagger-ui/index.html
--> make sure that all of your endpoints work as expected
--> invoke your endpoints using Postman and make sure that they're all working as expected

- create a FlightBookingNotFoundException class and throw this exception when the user attempts to update a non-existing booking
- try to update a non-exisiting booking and make sure that a 500 HTTP error is returned
- create a ControllerAdvice that returns a proper HTTP response whenever FlightBookingNotFound is thrown
- try to update a non-exisiting booking and make sure that a proper HTTP response is returned

- secure your application with TLS (HTTPS) with a self-signed certificate
- make sure that the server doesn't accept unsecured HTTP requests
- make sure that the server accepts HTTPS requests, you should notice that the browser doesn't trust the connection to your application's server since it doesn't trust your self signed certificate

- install and start PostgreSQL server on your local machine
- add spring-boot-starter-data-jpa dependency to your Maven POM file to be able to use Spring Data
- add postgresql dependency to your Maven POM file to be able to connect to your PostgreSQL server
- rename your App conf file application.properties to application.yml (YAML is more readable than PROPERTIES)
- create a database on your PostgreSQL (using pgAdmin)
- add DB connection configuration to your application.yml file
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/lastminute
    username: postgres
    password: yourPassword
- add the liquibase dependency to your Maven POM file to be able to automatically create the DB at startup (if not already created)
- enable liquibase in the configuration file
spring:
  liquibase:
    enabled: true
- create a Liquibase script in the resources folder that creates a FLIGHT_BOOKING table with the same structure as the FlightBooking entity
- add the following property to make sure that the DB schema matches the entity classes at the startup of the application
spring:
  jpa:
    hibernate:
      ddl-auto: validate
- create a FlightBooking entity that represents the FLIGHT_BOOKING table
- create a FlightBookingRepository that will be used to interact with the DB
- use the FlightBookingRepository inside the FlightBookingService to read/write flight bookings to the DB instead of memory
